local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local events = replicatedStorage.Package.Events
local runService = game:GetService("RunService")
local data = replicatedStorage.Datas[player.UserId]
local skills = replicatedStorage.Package.Skills
local market = game:GetService("MarketplaceService")

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Quest = {
    "Top X Fighter", "SSJB Wukong", "Citizen", "Kid Nohag", "Chilly", "X Fighter Trainer",
    "Super Vegetable", "Klirin", "SSJ2 Wukong", "Perfect Atom", "Radish", "Mapa",
    "Broccoli", "SSJG Kakata", "Kai-fist Master", "Kaio Student", "Turtle Student"
}

local MobTable = {}
local mobNamesAdded = {}

-- Llenar MobTable con nombres Ãºnicos de mobs
for _, mob in pairs(game:GetService("Workspace").Living:GetChildren()) do
    if not player:FindFirstChild(mob.Name) and not mobNamesAdded[mob.Name] then
        table.insert(MobTable, mob.Name)
        mobNamesAdded[mob.Name] = true
    end
end

local Window = Rayfield:CreateWindow({
   Name = "Rayfield Example Window",
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

local Tab = Window:CreateTab("MainTab", 4483362458)

local Toggle = Tab:CreateToggle({
   Name = "AutoFarm",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
       getgenv().AutoFarm = Value
   end,
})

local DropdownMob = Tab:CreateDropdown({
   Name = "Select Mob",
   Options = MobTable,
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "Dropdown1",
   Callback = function(Option)
       SelectedMob = Option
   end,
})

local DropdownQuest = Tab:CreateDropdown({
   Name = "Select Quest",
   Options = Quest,
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "Dropdown2",
   Callback = function(Option)
        SelectedQuest = Option
   end,
})

task.spawn(function()
    while task.wait() do
        pcall(function()
            if getgenv().AutoFarm then
                for _, mob in ipairs(game:GetService("Workspace").Living:GetChildren()) do
                    if mob.Name:lower() == SelectedMob:lower() and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and mob:FindFirstChild("Humanoid") and mob:FindFirstChild("HumanoidRootPart") and mob.Humanoid.Health > 0 then
                        repeat
                            quest()
                            player.Character.HumanoidRootPart.CFrame = mob.HumanoidRootPart.CFrame * CFrame.new(0, 0, 2)
                            wait()
                            events.p:FireServer("Blacknwhite27", 1)
                        until not getgenv().AutoFarm or mob == nil or mob.Humanoid.Health <= 0
                    end
                end
            end
        end)
    end
end)
local function quest()
    if replicatedStorage.Datas[player.UserId].Quest.Value ~= SelectedQuest then
        local questNPC = game:GetService("Workspace").Others.NPCs[SelectedQuest]
        player.Character.HumanoidRootPart.CFrame = questNPC.HumanoidRootPart.CFrame
        repeat
            wait()
            events.Qaction:InvokeServer(questNPC)
        until replicatedStorage.Datas[player.UserId].Quest.Value == SelectedQuest
    end
end
