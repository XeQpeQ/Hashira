local LP = game.Players.LocalPlayer
local client = game.Players.LocalPlayer
local FarmMethod = "Behind"
local tweenspeed = 400
local Distance = 10
local events = game:GetService("ReplicatedStorage").Package.Events
local rs = game:GetService("RunService")
local data = game.ReplicatedStorage.Datas[LP.UserId]
local skills = game.ReplicatedStorage.Package.Skills
local market = game:GetService("MarketplaceService")

local MobTable = {}
local mobNamesAdded = {}

-- Fill MobTable with unique mob names
for _, mob in pairs(game:GetService("Workspace").Living:GetChildren()) do
    if not player:FindFirstChild(mob.Name) and not mobNamesAdded[mob.Name] then
        table.insert(MobTable, mob.Name)
        mobNamesAdded[mob.Name] = true
    end
end

local Quest = {
    "Top X Fighter",
    "SSJB Wukong",
    "Citizen",
    "Kid Nohag",
    "Chilly",
    "X Fighter Trainer",
    "Super Vegetable",
    "Klirin",
    "SSJ2 Wukong",
    "Perfect Atom",
    "Radish",
    "Mapa",
    "Broccoli",
    "SSJG Kakata",
    "Kai-fist Master",
    "Kaio Student",
    "Turtle Student"
}

local bb = game:GetService('VirtualUser')

game:GetService('Players').LocalPlayer.Idled:connect(function()
    bb:CaptureController()
    bb:ClickButton2(Vector2.new())
    ab.Text = "Roblox intentó expulsarte, pero lo evité"
    wait(2)
    ab.Text = "Estado: Activo"
end)

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Hashira Hub",
   LoadingTitle = "Loading",
   LoadingSubtitle = "",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil,
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

local Tab = Window:CreateTab("MainTab", 4483362458)

local Toggle = Tab:CreateToggle({
   Name = "On/Off",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
        getgenv().AutoFarm = Value
   end,
})

local DropdownMob = Tab:CreateDropdown({
   Name = "Select Mob",
   Options = MobTable,  -- Asegúrate de definir MobTable correctamente
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "Dropdown1",
   Callback = function(Option)
        SelectedMob = Option
   end,
})

local DropdownQuest = Tab:CreateDropdown({
   Name = "Select Quest",
   Options = Quest,
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "Dropdown2",
   Callback = function(Option)
       SelectedQuest = Option
   end,
})

local Slider = Tab:CreateSlider({
   Name = "Slider Example",
   Range = {0, 10},
   Increment = 1,
   Suffix = "",
   CurrentValue = 1,
   Flag = "Slider1", 
   Callback = function(Value)
    TpDistance = Value
   end,
})

local function GetDistance(Endpoint)
    if typeof(Endpoint) == "Instance" then
        Endpoint = Vector3.new(Endpoint.Position.X, LP.Character.HumanoidRootPart.Position.Y, Endpoint.Position.Z)
    elseif typeof(Endpoint) == "CFrame" then
        Endpoint = Vector3.new(Endpoint.Position.X, LP.Character.HumanoidRootPart.Position.Y, Endpoint.Position.Z)
    end
    return (Endpoint - LP.Character.HumanoidRootPart.Position).Magnitude
end

local function Tween(Endpoint)
    if typeof(Endpoint) == "Instance" then
        Endpoint = Endpoint.CFrame
    end
    local Distance = GetDistance(Endpoint)
    local TweenInfo = TweenInfo.new(Distance / tweenspeed, Enum.EasingStyle.Linear)
    local TweenFunc = game:GetService("TweenService"):Create(LP.Character.HumanoidRootPart, TweenInfo, {CFrame = Endpoint})
    TweenFunc:Play()

    function TweenFunc:Cancel()
        TweenFunc:Cancel()
        return false
    end

    if Distance <= 100 then
        LP.Character.HumanoidRootPart.CFrame = Endpoint
        TweenFunc:Cancel()
        return false
    end
    return TweenFunc
end

-- Auto Farm Method
task.spawn(function()
    while wait() do
        pcall(function()
            SkillActive = AutoUseSkills and (FarmBoss and NearestMobs) or AutoUseSkills and (FarmQuest and NearestMobs) or AutoUseSkills and (FarmMob and NearestMobs) or AutoUseSkills and (AutoSaibamen and NearestMobs)
            local FarmModes

            if FarmMethod == "Above" then
                FarmModes = CFrame.new(0, Distance, 0) * CFrame.Angles(math.rad(-90), 0, 0)
            elseif FarmMethod == "Below" then
                FarmModes = CFrame.new(0, -Distance, 0) * CFrame.Angles(math.rad(90), 0, 0)
            elseif FarmMethod == "Behind" then
                FarmModes = CFrame.new(0, 0, Distance)
            elseif FarmMethod == "Ahead" then
                FarmModes = CFrame.new(0, 0, -Distance) * CFrame.Angles(0, math.rad(180), 0)
            end
        end)
    end
end)

local function quest()
    if data.Quest.Value ~= SelectedQuest then
        LP.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Others.NPCs[SelectedQuest].HumanoidRootPart.CFrame
        repeat
            wait()
            events.Qaction:InvokeServer(game:GetService("Workspace").Others.NPCs[SelectedQuest])
        until data.Quest.Value == SelectedQuest
    end
end

task.spawn(function()
    while task.wait() do
        pcall(function()
            if getgenv().AutoFarm then
                if not LP.Character.HumanoidRootPart:FindFirstChild("BodyVelocity") then
                    local antifall3 = Instance.new("BodyVelocity", LP.Character.HumanoidRootPart)
                    antifall3.Velocity = Vector3.new(0, 0, 0)
                    antifall3.MaxForce = Vector3.new(9e9, 9e9, 9e9)
                end

                for _, v in pairs(game:GetService("Workspace").Living:GetChildren()) do
                    if v:IsA("Model") and v:FindFirstChild("Humanoid") and v.Name:lower() == SelectedMob:lower() and v.Humanoid.Health > 0 then
                        local distance = GetDistance(v:GetModelCFrame() * FarmModes)

                        repeat
                            quest()
                            local ohString1 = "Blacknwhite27"
                            local ohNumber2 = 1
                            events.p:FireServer(ohString1, ohNumber2)
                            task.wait()

                            if distance < 25 then
                                if TweenFa then
                                    TweenFa:Cancel()
                                    wait(0.1)
                                end
                                LP.Character.HumanoidRootPart.CFrame = v:GetModelCFrame()
                            else
                                TweenFa = Tween(v:GetModelCFrame() * FarmModes)
                            end

                            if v.Humanoid.Health > 0 and v:FindFirstChild("HumanoidRootPart") and distance < 10 then
                                NearestMobs = true
                            elseif v.Humanoid.Health <= 0 or not v:FindFirstChild("Humanoid") and distance > 10 then
                                NearestMobs = false
                            end

                            distance = GetDistance(v:GetModelCFrame() * FarmModes) -- Actualiza la distancia en cada iteración
                        until not getgenv().AutoFarm or not v.Parent or v.Humanoid.Health <= 0 or not v:IsDescendantOf(workspace)

                        NearestMobs = false
                    end
                end
            end

            if not getgenv().AutoFarm and TweenFa then
                TweenFa:Cancel()
            end
        end)
    end
end)

print("Script loaded successfully!")
