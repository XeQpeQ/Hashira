import time
import sys
import win32gui
import win32con
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import tkinter as tk
from tkinter import messagebox
import re


def set_window_always_on_top(hwnd):
    """Configura la ventana identificada por 'hwnd' para que esté siempre en primer plano."""
    win32gui.SetWindowPos(hwnd, win32con.HWND_TOPMOST,
                          0, 0, 0, 0,
                          win32con.SWP_NOMOVE | win32con.SWP_NOSIZE)

def find_window_start_or_end_with(title_substring):
    """Busca una ventana cuyo título comience o termine con 'title_substring' y devuelve el handle si existe, o None si no."""
    def enum_windows(hwnd, lparam):
        window_title = win32gui.GetWindowText(hwnd)
        if window_title.startswith(title_substring) or window_title.endswith(title_substring):
            lparam.append(hwnd)
    hwnds = []
    win32gui.EnumWindows(enum_windows, hwnds)
    return hwnds[0] if hwnds else None

def open_youtube_video(video_id):
    """Abre un video de YouTube en modo 'app'."""
    youtube_video_url = f"https://www.youtube.com/embed/{video_id}?autoplay=1&controls=0&modestbranding=1&rel=0&showinfo=0"

    # Configuración de Chrome para abrir en modo "app" con la URL de YouTube
    chrome_options = Options()
    chrome_options.add_argument(f"--app={youtube_video_url}")
    chrome_options.add_argument("--disable-infobars")
    chrome_options.add_argument("--window-size=800,450")  # Configurar tamaño de ventana
    chrome_options.add_argument("--force-device-scale-factor=1")
    chrome_options.add_argument("--disable-gpu")

    # Inicializa el driver de Chrome
    driver = webdriver.Chrome(options=chrome_options)

    # Se busca la ventana que comience o termine con "YouTube"
    hwnd = find_window_start_or_end_with("YouTube")
    if hwnd:
        set_window_always_on_top(hwnd)
    else:
        print("No se encontró la ventana que comience o termine con 'YouTube'.")

    # Bucle que mantiene la ventana siempre en primer plano y oculta la interfaz
    try:
        root.withdraw()  # Ocultar la interfaz
        while True:
            time.sleep(1)
            hwnd = find_window_start_or_end_with("YouTube")
            if hwnd:
                set_window_always_on_top(hwnd)
            else:
                print("La aplicación de YouTube se ha cerrado.")
                break
    except KeyboardInterrupt:
        print("Interrupción manual recibida. Cerrando la aplicación...")

    # Finaliza el driver y termina el programa
    driver.quit()

    # Vuelve a mostrar la interfaz de usuario
    root.deiconify()  # Mostrar la interfaz

def extract_video_id(url):
    """Extrae el ID del video de una URL de YouTube después del parámetro 'v='."""
    match = re.search(r"[?&]v=([a-zA-Z0-9_-]{11})", url)
    if match:
        return match.group(1)
    else:
        return None

def search_youtube_videos(query):
    """Realiza la búsqueda de videos en YouTube usando Selenium."""
    # Configuración del navegador con Selenium
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # Ejecutar en segundo plano (sin ventana del navegador)
    chrome_options.add_argument("--disable-gpu")

    # Iniciar el navegador
    driver = webdriver.Chrome(options=chrome_options)

    # Ir a YouTube y buscar
    driver.get("https://www.youtube.com/results?search_query=" + query)
    time.sleep(2)  # Espera a que carguen los resultados

    # Extraer los enlaces de los primeros 5 videos
    video_elements = driver.find_elements(By.XPATH, '//*[@id="video-title"]')[:5]

    # Crear una lista con los títulos y URLs de los videos
    videos = []
    for element in video_elements:
        title = element.get_attribute("title")
        url = element.get_attribute("href")
        videos.append((title, url))

    # Cerrar el navegador
    driver.quit()

    return videos

def on_video_select(event):
    """Función que maneja la selección de un video en la lista."""
    selected_index = listbox.curselection()
    if selected_index:
        selected_video = listbox.get(selected_index)
        video_url = selected_video[1]  # Obtiene la URL del video
        video_id = extract_video_id(video_url)
        if video_id:
            open_youtube_video(video_id)
        else:
            messagebox.showerror("Error", "No se pudo extraer el ID del video.")

def on_search():
    """Función para realizar la búsqueda en YouTube."""
    query = entry_search.get()
    if query:
        try:
            # Realizar la búsqueda de videos en YouTube
            search_results = search_youtube_videos(query)

            # Limpiar la lista de resultados antes de agregar nuevos
            listbox.delete(0, tk.END)

            # Agregar los primeros 5 resultados a la lista
            for result in search_results:
                video_title = result[0]
                video_url = result[1]
                listbox.insert(tk.END, (video_title, video_url))

        except Exception as e:
            messagebox.showerror("Error", f"Ocurrió un error al realizar la búsqueda: {e}")
    else:
        messagebox.showwarning("Advertencia", "Por favor, ingresa un término de búsqueda.")

# Crear la ventana principal de la interfaz gráfica
root = tk.Tk()
root.title("Buscar Videos de YouTube")
root.geometry("600x400")
root.config(bg="#1e1e1e")

# Título de la interfaz
label_title = tk.Label(root, text="Busca un video de YouTube", font=("Helvetica", 14), fg="#ffffff", bg="#1e1e1e")
label_title.pack(pady=10)

# Campo de entrada para la búsqueda
entry_search = tk.Entry(root, font=("Helvetica", 12), width=40)
entry_search.pack(pady=10)

# Botón de búsqueda
search_button = tk.Button(root, text="Buscar", font=("Helvetica", 12), fg="#ffffff", bg="#007bff", command=on_search)
search_button.pack(pady=10)

# Lista de resultados de búsqueda
listbox = tk.Listbox(root, font=("Helvetica", 12), width=60, height=10)
listbox.pack(pady=10)

# Asignar la función de selección de video al doble clic en la lista
listbox.bind("<Double-1>", on_video_select)

# Iniciar la interfaz gráfica
root.mainloop()
